# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10r3IVdaGmM34VdBGoj2ZcrrbcYGGx0aa
"""

# streamlit_app.py
import streamlit as st
import pandas as pd

# Set spreadsheet IDs and URLs
SPREADSHEET_ID = "16ngFtNv5SoHAOxJb6m59_k5iYSQqVwN6"
GID1 = 2003181009
GID2 = 1134201514

url1 = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/export?format=csv&gid={GID1}"
url2 = f"https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/export?format=csv&gid={GID2}"

# Load data
x1 = pd.read_csv(url1)
y1 = pd.read_csv(url2)
x = x1.iloc[1:].copy()
y = y1.iloc[1:].copy()

# Fiber inventory SN cleanup
pn_in_inventory = y['PN'].dropna().astype(int).tolist()
y = y[y['PN'].isin(pn_in_inventory)]

# Filters UI
st.title("Q.ANT's Fiber Array Inventory")

# Wavelength
wavelengths = ["780", "980", "1550", "780/1550/780"]
wavelength_option = st.multiselect("Choose Wavelength", wavelengths)
if wavelength_option:
    x = x[x['Wavelength'].isin(wavelength_option)]

# Tip Type
tip_options = ["Cleaved", "Lense (printed)", "Tapered / spliced", "WAFT"]
selected_tips = st.multiselect("Choose Tip Type(s)", tip_options)
if selected_tips:
    x = x[x['Tip type'].isin(selected_tips)]

#Dimension lid
dimensions = ["5x4.7x1.0","1.0", "0.5", "0.1"]
dimension_lid_option = st.multiselect("Choose Dimension lid", dimensions)
if dimension_lid_option:
   x = x[x['Dimension lid'].isin(dimension_lid_option)]

# Channel
channel_options = ["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40"]
selected_channels = st.multiselect("Choose Channel Count(s)", channel_options)
if selected_channels:
    x = x[x['Channel'].isin(selected_channels)]

# V-Groove Pitch
pitch_options = ["127", "250", "500"]
selected_pitch = st.multiselect("Select V-groove Pitch",  pitch_options)
if selected_pitch:
    x = x[x['V-groove pitch'].isin(selected_pitch)]

# V-Groove tolerance
Tolerance_options =["+/-0.5","+/-100","+/-1.0","+/-0.6","+/-0.7","+/-0.8","+/-0.9","+/-0.10","+/-0.11","+/-0.12","+/-0.13","+/-0.14","+/-0.15","+/-0.16","/-0.3µm"]
selected_tolerance = st.multiselect("Select V-Groove tolerance", Tolerance_options)
if selected_tolerance:
    x=x[x['V-groove tolerance'].isin(selected_tolerance)]

# Fiber 1 Material
material_options = ["10210030","10210038","10210017","HA15-PS-U25D","Nufern UHNA3 1550","Nufern UHNA3 980","Nufern UHNA7", "PM1016L", "PM15-U25D" ,"PM1550-XP", "PM2000D" ,             "PM780-HP","PM980-XP","SMF-28 Ultra" ,"UHNA7", "YOFC PM1016-T","Corning ClearCurve LBL Optical fiber","corning PM15-U25D"]
selected_material = st.multiselect("Select Fiber 1 Material", material_options)
if selected_material:
    x = x[x['Fiber 1 material'].isin(selected_material)]

# Fiber 2 Material
selected_material2 = st.multiselect("Select Fiber 2 Material", material_options)
if selected_material2:
    x = x[x['Fiber 2 material'].isin(selected_material2)]

# MFD
mfd_options = ["3.5 ± 0.3","1.9 - 3.6", "2.5 ± 0.3", "2.5 ± 0.5","3.2 ± 0.3","3.2 ± x.x","4.0 ± 0.3","4.1 ± 0.3","4.2 x 3.2","850: 5.3 ± 1.0","6.6 ± 0.5","10.1 ± 0.4", "10.4 ± 0.5","1060:10.5 ± 0.5", "1.5x1.5","3x3", "4.1x3.1","5x5","10.5 ± 0.5","5.3 ± 1.0"]
selected_mfd1 = st.multiselect("Select MFD 1",  mfd_options)
if selected_mfd1:
    x = x[x['MFD 1'].isin(selected_mfd1)]

selected_mfd2 = st.multiselect("Select MFD 2",  mfd_options)
if selected_mfd2:
    x = x[x['MFD 2'].isin(selected_mfd2)]

# Extract Serial Numbers from relevant columns
sn_columns = ['Serial numbers', 'SN2', 'SN3', 'SN4', 'SN5', 'SN6', 'SN7', 'SN8', 'SN9', 'SN10', 'SN11', 'SN12']
filtered_SN = []
for col in sn_columns:
    if col in x.columns:
       for el in x[col]:
           if type(el) in [int,float] and not pd.isna(el):
              filtered_SN.append(int(el))

#Extract the PN numbers from the table
table_pn = x['Drawing availability'].dropna().tolist()
for el in x['Drawing availability']:
   if type(el) in [int,float] and not pd.isna(el):
      table_pn = x['Drawing availability'].dropna().tolist()

clean_table_pn = []
for pn in table_pn:
  if len(pn) == 8:
     try:
         pn_8digits = int(str(pn)[:8])
         clean_table_pn.append(pn_8digits)
     except ValueError:
        pass
#print(clean_table_pn)


#planned fibers
planned_fibers=[]
planned_columns = ['Planned use','PU2','PU3','PU4','PU5','PU6','PU7','PU8','PU9','PU10']
for item in planned_columns:
    for el in x[item]:
        if type(el) in [int,float] and not pd.isna(el):
           planned_fibers.append(int(el))



# Match SNs with inventory
match_list = list(set(pn_in_inventory).intersection(clean_table_pn))
new_inv_table = y[y['PN'].isin(match_list)]
new= new_inv_table[['PN', 'SN', 'Box number','Chanel count']]


#highligthing planned fiber arrays
def highlight_all(val):
    return 'background-color: yellow' if val in planned_fibers else ''

new_inv = new.style.applymap(highlight_all).format({'PN': '{:.0f}','SN': '{:.0f}'})

#choose what you want to see
table_options = ['A table showing the matching FAs available in our inventory and their location', 'A general table showing all the characteristics of the matching FAs','Both tables']
selected_table = st.selectbox("select the table you would like to see", table_options)

if selected_table =='A table showing the matching FAs available in our inventory and their location':
   # Display results
   st.subheader("Matching FAs available in our Inventory")
   st.dataframe(new_inv)
   count = len(new)
   if count>0:
      st.success(f"We currently have {count} corresponding fiber arrays in our inventory")
   elif count == 0:
      st.success(f"Sorry we currently don't have any matching fiber array in our inventory")

elif selected_table =='A general table showing all the characteristics of the matching FAs':
    # Display results
    st.subheader("Matching FAs and their characteristics")
    st.dataframe(x)
    count = len(x)
    if count>0:
       st.success(f"{count} corresponding fiber arrays found")
    elif count==0:
       st.success(f" Sorry no corresponding fiber array was found")

elif selected_table == 'Both tables':
        # Display results
   st.subheader("Matching FAs available in our Inventory")
   st.dataframe(new_inv)
   count = len(new)
   if count>0:
      st.success(f"We currently have {count} corresponding fiber arrays in our inventory")
   elif count== 0:
      st.success(f"Sorry we currently don't have any matching fiber array in our inventory")
   
       # Display results
   st.subheader("Matching FAs and their characteristics")
   st.dataframe(x)
   count = len(x)
   if count>0:
       st.success(f"{count} corresponding fiber arrays found")
   elif count==0:
       st.success(f" Sorry no corresponding fiber array was found")

#error table
found_in_inventory_but_not_in_table = []
for a in set(pn_in_inventory):
   if a not in set(clean_table_pn):
      found_in_inventory_but_not_in_table.append(a)
print(found_in_inventory_but_not_in_table)
z=y[y['PN'].isin(found_in_inventory_but_not_in_table)]
err = z[['PN','SN']].round(0)

# add errors
options = ["no thank you","yes"]
error = st.selectbox("would you like to see the existing errors in your excel file?",options)
if error == "yes":
    st.subheader("These FAs are in the inventory but not registered under the big table (lack of diagrams).So the can't appear on the filtered inventory table")
    st.dataframe(err)
    st.success(f" These FAs will be missing when filtering the inventory. Please add the characteristics of these FAs in the big table to ensure accurate fiber count") 
#(f"{count} fiber{'s' if count != 1 else ''} found")
